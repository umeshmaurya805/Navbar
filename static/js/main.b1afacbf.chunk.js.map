{"version":3,"sources":["Container/Navbar Components/Logo/Logo.js","Redux-files/action.js","Redux-files/constants.js","Container/Navbar Components/Menu/menu.js","Container/Navbar Components/SearchField/Search.js","Container/Navbar Components/Social Media/SocialMedia.js","Container/Navbar/Nav.js","Redux-files/reducer.js","Redux-files/store.js","Container/App.js","serviceWorker.js","index.js"],"names":["Logo","dispatch","useDispatch","className","id","onClick","type","icon","faBars","Menu","show","useSelector","state","title","link","map","items","i","key","Search","placeholder","faSearch","SocialMedia","faFacebook","faInstagram","faYoutube","Nav","React","Component","initialState","reducer","action","logger","createLogger","store","createStore","applyMiddleware","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"yWAqBkBA,EAbP,WACT,IAAMC,EAAWC,cACf,OACC,yBAAKC,UAAU,QACf,yBAAKA,UAAU,QACd,2CAEA,yBAAKA,UAAU,OAAOC,GAAG,OAAOC,QAAS,kBAAIJ,ECbzC,CACFK,KCHe,gBFgBjB,kBAAC,IAAD,CAAiBC,KAAMC,SGkBXC,G,MA9BP,WACX,IACUC,EADOC,aAAY,SAAAC,GAAK,OAAEA,EAAMF,QAClB,OAAO,WAkBrBD,EAjBS,CAAC,CACZI,MAAM,OACNC,KAAK,IAET,CACID,MAAM,QACNC,KAAK,IAET,CACID,MAAM,WACNC,KAAK,IAET,CACID,MAAM,YACNC,KAAK,KAGYC,KAAI,SAACC,EAAMC,GAC5B,OAAO,wBAAIC,IAAMD,GAAID,EAAMH,UAG/B,OACI,yBAAKV,UAAWO,GACbD,KCXMU,G,MAbJ,WAEP,OACI,yBAAKhB,UAAU,cACf,2BAAOG,KAAK,OAAOc,YAAY,gCAC/B,kBAAC,IAAD,CAAiBb,KAAMc,S,gBCahBC,EAjBC,WACd,OACI,yBAAKnB,UAAU,WACd,wBAAIA,UAAU,YACd,kBAAC,IAAD,CAAiBI,KAAMgB,OAEvB,wBAAIpB,UAAU,aACd,kBAAC,IAAD,CAAiBI,KAAMiB,OAEvB,wBAAIrB,UAAU,WACd,kBAAC,IAAD,CAAiBI,KAAMkB,SCUjBC,G,6KAfX,OAEI,yBAAKvB,UAAU,UAEP,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAZEwB,IAAMC,Y,eCLlBC,EAAc,CACjBnB,MAAK,GAUOoB,EARD,WAA8B,IAA7BlB,EAA4B,uDAAtBiB,EAAaE,EAAS,uCAC3C,OAAOA,EAAOzB,MACV,ILPmB,YKOF,sBACVM,EADU,CACJF,MAAME,EAAMF,OAEzB,QAAS,OAAOE,I,QCPdoB,EAAQC,yBAECC,EADDC,YAAYL,EAAQM,YAAgBJ,ICqBnCK,E,uKAhBX,OACE,kBAAC,IAAD,CAAUH,MAAOA,GAEf,yBAAK/B,UAAU,OACb,kBAAC,EAAD,Y,GARQyB,aCOZU,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBzC,QACfmC,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MCzFjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDWnB,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,UAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,UAAN,sBAEP/B,IAgEV,SAAiCO,EAAOC,GAEtC2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,MAAK,WAC7BV,OAAOC,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAyB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OCjC/BE,K","file":"static/js/main.b1afacbf.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Logo.css'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\r\nimport {bars_click} from '../../../Redux-files/action';\r\nimport { useDispatch } from 'react-redux';\r\n \r\nconst Logo=()=>{\r\n  const dispatch = useDispatch()\r\n    return(\r\n     <div className=\"logo\">\r\n     <div className=\"head\">\r\n      <h1>Vr fashion</h1>\r\n     </div> \r\n      <div className=\"bars\" id=\"bars\" onClick={()=>dispatch(bars_click())} >\r\n      <FontAwesomeIcon icon={faBars} />\r\n      </div>\r\n  </div>\r\n    )  \r\n  }\r\n  export default (Logo);\r\n","import {SHOW_MENU} from './constants';\r\nexport const bars_click =()=>{\r\n    return{\r\n        type: SHOW_MENU\r\n    }\r\n}","export const SHOW_MENU='SHOW_MENU';","import React from 'react';\r\nimport './Menu.css';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst Menu=()=>{\r\nconst showList = useSelector(state=>state.show)\r\n    const show=showList?\"show\":\"nav-list\";\r\n    const menuList=[{\r\n        title:\"Home\",\r\n        link:'',\r\n    },\r\n    {\r\n        title:\"About\",\r\n        link:'',\r\n    },\r\n    {\r\n        title:\"Products\",\r\n        link:'',\r\n    },\r\n    {\r\n        title:\"Catalogue\",\r\n        link:'',\r\n    },\r\n    ]\r\n    const Menu= menuList.map((items,i)=>{\r\n        return <li key ={i}>{items.title}</li>\r\n\r\n    })\r\n    return(\r\n        <div className={show} >\r\n          {Menu}        \r\n        </div>\r\n    )  \r\n  }\r\n  export default (Menu);\r\n","import React from 'react';\r\nimport './Search.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nconst Search=()=>{\r\n\r\n      return(\r\n          <div className=\"search-bar\">\r\n          <input type=\"text\" placeholder=\"what are you looking for !!\"/>\r\n          <FontAwesomeIcon icon={faSearch} />\r\n\r\n      </div>\r\n         \r\n      ) \r\n    }\r\n\r\n  \r\n  export default Search;\r\n  ","import React from 'react';\r\nimport './SocialMedia.css';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faFacebook ,faInstagram,faYoutube} from '@fortawesome/free-brands-svg-icons'\r\n \r\n\r\nconst SocialMedia=()=>{\r\n    return(\r\n        <div className=\"contact\">\r\n         <li className=\"facebook\">\r\n         <FontAwesomeIcon icon={faFacebook} />\r\n         </li>\r\n         <li className=\"instagram\">\r\n         <FontAwesomeIcon icon={faInstagram}/>\r\n         </li>\r\n         <li className=\"youtube\">\r\n         <FontAwesomeIcon icon={faYoutube} />\r\n         </li>\r\n   \r\n       \r\n    </div>\r\n    )  \r\n  }\r\n  export default SocialMedia;","import React from 'react';\r\nimport Logo from '../Navbar Components/Logo/Logo';\r\nimport Menu from '../Navbar Components/Menu/menu';\r\nimport Search from '../Navbar Components/SearchField/Search';\r\nimport SocialMedia from '../Navbar Components/Social Media/SocialMedia';\r\nimport './nav.css'\r\n\r\nclass Nav extends React.Component  {\r\n  \r\n  \r\n  render(){\r\n\r\n    return(\r\n\r\n        <div className=\"navbar\">\r\n                \r\n                <Logo/>\r\n                <Menu/>\r\n                <Search/>\r\n                <SocialMedia/>\r\n                \r\n            </div>\r\n        \r\n    )  ;\r\n  }\r\n\r\n}\r\nexport default Nav;\r\n","import { SHOW_MENU } from \"./constants\"\r\n\r\nconst initialState ={\r\n   show:false\r\n}\r\nconst reducer=(state=initialState,action)=>{\r\nswitch(action.type){\r\n    case SHOW_MENU : return{\r\n        ...state,show:!state.show\r\n    }\r\n    default: return state;\r\n}\r\n}\r\nexport default reducer;","import {createStore,applyMiddleware} from 'redux';\r\nimport reducer from './reducer';\r\nimport {createLogger} from 'redux-logger';\r\nconst logger =createLogger();\r\nconst store = createStore(reducer,applyMiddleware(logger));\r\nexport default store;","import React, { Component } from 'react';\nimport Nav from './Navbar/Nav';\nimport {Provider} from 'react-redux';\nimport store from '../Redux-files/store';\n\nclass App extends Component{\n  \n  render(){\n\n    return (\n      <Provider store={store}>\n\n        <div className=\"App\">\n          <Nav/>\n         \n        </div>\n        </Provider>\n\n    )\n  }\n  }\n\n  \n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Container/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}